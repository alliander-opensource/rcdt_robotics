<?xml version="1.0"?>
<!--
SPDX-FileCopyrightText: Alliander N. V.

SPDX-License-Identifier: Apache-2.0
-->

<!-- 
Based on:
https://github.com/husarion/husarion_ugv_ros/blob/2.1.2/panther_description/urdf/panther_macro.urdf.xacro
-->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:macro name="panther_ros2_control"
    params="
      panther_version
      use_sim:=false
      namespace:=''
    ">

    <xacro:property name="ns" value='${namespace + "/" if namespace else ""}' />

    <ros2_control name="${ns}panther_system" type="system">
      <hardware>
        <xacro:if value="${use_sim}">
          <plugin>panther_gazebo/GzPantherSystem</plugin>
          <param name="e_stop_initial_state">true</param>
        </xacro:if>

        <xacro:unless value="$(arg use_sim)">
          <plugin>panther_hardware_interfaces/PantherSystem</plugin>

          <param name="panther_version">${panther_version}</param>

          <param name="encoder_resolution">1600</param>

          <param name="gear_ratio">30.08</param>
          <param name="gearbox_efficiency">0.75</param>

          <!-- Same as set in the Roboteq driver (TNM parameter) -->
          <param name="motor_torque_constant">0.11</param>

          <!-- Max RPM speed set in the Roboteq driver (MXRPM parameter) -->
          <param name="max_rpm_motor_speed">3600.0</param>

          <param name="can_interface_name">panther_can</param>
          <param name="master_can_id">3</param>
          <param name="front_driver_can_id">1</param>
          <param name="rear_driver_can_id">2</param>
          <param name="sdo_operation_timeout_ms">100</param>

          <!-- Depends on frequency of the controller, more critical motors state are sent with
              higher frequency, other parameters are sent with lower, here allowed time is set
              to be expected period +50% margin -->
          <param name="pdo_motor_states_timeout_ms">15</param>
          <param name="pdo_driver_state_timeout_ms">75</param>

          <!-- It will be rounded to the closest value taking into account current controller
          frequency -->
          <param name="driver_states_update_frequency">20.0</param>

          <param name="max_roboteq_initialization_attempts">5</param>
          <param name="max_roboteq_activation_attempts">5</param>

          <!-- TODO after all tests update parameters, these ones are quite high for the worst case
          scenario -->
          <param name="max_write_pdo_cmds_errors_count">2</param>
          <param name="max_read_pdo_motor_states_errors_count">2</param>
          <param name="max_read_pdo_driver_state_errors_count">2</param>
        </xacro:unless>
      </hardware>

      <joint name="fl_wheel_joint">
        <command_interface name="velocity" />
        <state_interface name="position" />
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
      <joint name="fr_wheel_joint">
        <command_interface name="velocity" />
        <state_interface name="position" />
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
      <joint name="rl_wheel_joint">
        <command_interface name="velocity" />
        <state_interface name="position" />
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
      <joint name="rr_wheel_joint">
        <command_interface name="velocity" />
        <state_interface name="position" />
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>

      <xacro:if value="${use_sim}">
        <sensor name="${ns}imu">
          <state_interface name="orientation.x" />
          <state_interface name="orientation.y" />
          <state_interface name="orientation.z" />
          <state_interface name="orientation.w" />
          <state_interface name="angular_velocity.x" />
          <state_interface name="angular_velocity.y" />
          <state_interface name="angular_velocity.z" />
          <state_interface name="linear_acceleration.x" />
          <state_interface name="linear_acceleration.y" />
          <state_interface name="linear_acceleration.z" />
        </sensor>
      </xacro:if>
    </ros2_control>

  </xacro:macro>

</robot>